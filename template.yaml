AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  HostedZoneParameter:
    Type: String
    Description: The hosted zone for the Route53 records
  DomainNameParameter:
    Type: String
    Description: The domain name of the site
  ApiDomainNameParameter:
    Type: String
    Description: The subdomain of the API
    Default: "api."
  WebsiteDomainNameParameter:
    Type: String
    Description: The subdomain of the API
    Default: "website."

Resources:
  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: www.cloudbychris.com

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VisitorCount
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId:Z06426632T4N21PJ7409F
        Ref: HostedZoneParameter
      RecordSets:
        - Name: www.cloudbychris.com
            !Join [
              "",
              [!Ref WebsiteDomainNameParameter, !Ref DomainNameParameter],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyDistribution.DomainName

  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", ["*.", !Ref DomainNameParameter]]
      SubjectAlternativeNames:
        - !Ref DomainNameParameter
        - !Join ["", ["*.", !Ref DomainNameParameter]]
      DomainValidationOptions:
        - DomainName: !Ref DomainNameParameter
          HostedZoneId:
            Ref: HostedZoneParameter
      ValidationMethod: DNS

  MyDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate
          SslSupportMethod: sni-only
        Aliases:
          !Split [
            ",",
            !Join [
              "",
              [!Ref WebsiteDomainNameParameter, !Ref DomainNameParameter],
            ],
          ]
        DefaultCacheBehavior:
          ViewerProtocolPolicy: allow-all
          TargetOriginId: cloudbychris.com.s3-website.us-east-2.amazonaws.com
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
        Origins:
          - DomainName: cloudbychris.com.s3-website.us-east-2.amazonaws.com
            Id: cloudbychris.com.s3-website.us-east-2.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        Enabled: "true"
        DefaultRootObject: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref MyWebsite, "/*"]]
      Bucket: !Ref MyWebsite

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: PROD
      Domain:
        DomainName:
          !Join ["", [!Ref ApiDomainNameParameter, !Ref DomainNameParameter]]
        CertificateArn: !Ref MyCertificate
        Route53:
          HostedZoneId:
            Ref: HostedZoneParameter

  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: VisitorCount
      CodeUri: get-function/
      Handler: get-function
      Runtime: python3.8
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /get
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  PutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: VisitorCount
      CodeUri: put-function/
      Handler: put-function
      Runtime: python3.8
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /put
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi